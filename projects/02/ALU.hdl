// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits 
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two 
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and 
 * their effect are documented in the book. 
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if f == 1) or out = x & y (if == 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // create negated versions of x and y
    Not16(in=x, out=negatedx);
    Not16(in=y, out=negatedy);
    // mux the negated versions with the negate flags to get either the negated or the regular version
    Mux4Way16(a=x, b=false, c=negatedx, d=true, sel[0]=zx, sel[1]=nx, out=finalx);
    Mux4Way16(a=y, b=false, c=negatedy, d=true, sel[0]=zy, sel[1]=ny, out=finaly);

    // create an added and a anded version of x & y, and then mux the result based on f
    Add16(a=finalx, b=finaly, out=added);
    And16(a=finalx, b=finaly, out=anded);
    Mux16(a=anded, b=added, sel=f, out=result);

    // negate the result of above and mux it based on the no flag
    Not16(in=result, out=negated);
    Mux16(a=result, b=negated, sel=no, out=out, out[0..7]=out7, out[8..15]=out15, out[15]=negative);

    // determine if the entire out is zero
    Or8Way(in=out7, out=any7);
    Or8Way(in=out15, out=any15);
    Or(a=any7, b=any15, out=any);
    Xor(a=any, b=true, out=zr);

    // determine if the first bit is a 1, and thus negative
    And(a=negative, b=true, out=ng);
}
