// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16-bit wide.  
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = RAM64[address(t)](t)
 *     Write: If load(t-1) then RAM64[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load == 1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[0..2], a=loada, b=loadb, c=loadc, d=loadd, e=loade, f=loadf, g=loadg, h=loadh);
    RAM8(in=in, load=loada, address=address[3..5], out=oa);
    RAM8(in=in, load=loadb, address=address[3..5], out=ob);
    RAM8(in=in, load=loadc, address=address[3..5], out=oc);
    RAM8(in=in, load=loadd, address=address[3..5], out=od);
    RAM8(in=in, load=loade, address=address[3..5], out=oe);
    RAM8(in=in, load=loadf, address=address[3..5], out=of);
    RAM8(in=in, load=loadg, address=address[3..5], out=og);
    RAM8(in=in, load=loadh, address=address[3..5], out=oh);
    Mux8Way16(a=oa, b=ob, c=oc, d=od, e=oe, f=of, g=og, h=oh, sel=address[0..2], out=out);
}
